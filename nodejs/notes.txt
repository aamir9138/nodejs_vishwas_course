node.js is cross-platform
1995 Netscape created JavaScript
1996 Microsoft created JScript
1996 Netscape submitted JavaScript to ECMA International for standarization
ECMAScript refers to the standard language whereas JavaScript is what we use in practice and builds on top of ECMAScript
JavaScript engine executes JavaScript code
JavaScript engines are typically developed be web browser vendors. each vendor has one
v8 - chrome
SpiderMonkey - Mozilla Firefox
JavaScriptCore - Safari Apple
Chakra - Microsoft Edge

visit v8.dev for details
v8 is written in C++
v8 can run standalone or can be embedded into any C++ program


JavaScript Runtime:
	JavaScript runtime is an environment which provides all the necessary components in order to use and run a JavaScript program

A JavaScript Engine is one component in the JavaScript Runtime
Node.js can run the JavaScript program outside the browser

github.com/nodejs/node ---- this repo contains code for JavaScript runtime
node/deps/ ------------ contain dependencies
uv(libuv) and v8 are the major dependencies present in deps folder
src  -------  contains code of nodejs in C++
lib  ------- this folder contains the JS code which access the C++ feature for example fs.js (to access file system)

Node.js runtime unlike the browser runtime doesnot has access to the web apis. there is no window or document when working with Node.js

Node.js is not a language, it is not a framework

nodejsfile>.vscode>settings.json>{"window.zoomLevel:2"}

node -v

node REPL:
	Read
	Evaluate
	Print
	Loop

node
>console.log("hello world")
>2+2
>

=> writing JavaScript code in a file:
	node index.js


with Nodejs we cannot interact with DOM, or other Web Platform Apis like Cookies. we don't have the document, window and all the other objects that are provided by the browser.

with browser we don't have all the nice APIs that Nodejs provides through its modules. for example filesystem access functionality

with Nodejs you control the envirnment
with browser you are the mercy of user choice

----------------------------------------------------
Modules:
	A module is an encapsulated and reusable chunk of code that has its own context
	In node.js, each file is treated as a separate module
Types of Modules:
	1. Local Modules - Modules that we create in our application
	2. Built-in Modulues - Modules that Node.js ships with out of the box
	3. Third party Modules - Modules written by other developers that we can use in our application

------
Local Modules:
	Modules that we create and use in our Applications
	- in node.js each file is a module that is isolated by default
	- to load a module into another file,  we use the require function
	- when index.js is executed, the code in the module is also executed
	- if the file we are requiring is a javascript file, we can skip specifying the extension and node.js will infer it on our behalf
	- let see in the next section how to expose certain things from the module not the full module

CommonJS:
	- CommonJS is a standard that states how a module should be structured and shared
	- Node.js adopted CommonJS when it started out and is what you will see in code bases

./ refers to the same folder

---
Module Exports:

---
Module Scope:
	Each loaded module in Node.js is wrapped with an IIFE that provides private scoping of code

	IIFE allows us to repeat variable or function names without any conflicts
	
IIFE (Immediately Invoked Function Expression) in Node.js
	Before a module's code is executed, Node.js will wrap it with a function wrapper that provides module scope

	This saves us from having to worry about conflicting variables or functions

	There is proper encapsulation and reusability is unaffected

---
Module Wrapper:
	- Every module in node.js gets wrapped in an IIFE before being loaded
	- IIFE helps keep top-level variables scoped to the module rather than the global object
 	- The IIFE that wraps every module contains 5 parameters which are pretty important for the functioning of a module

How parameters and arguments work with simple IIFE in Javascript:
	/* How parameters and arguments work in simple IIFE in javascript */
	/*  message == parameter
    	"Hello" and "Hey" == argument
    	output:
      	$ node iife
      	Hello Superman
     	 Hey Batman*/
	(function (message) {
 	 const superHero = 'Superman';
  	console.log(message, superHero);
	})('Hello');
	(function (message) {
 	 const superHero = 'Batman';
  	console.log(message, superHero);
	})('Hey');

How each Module is wrapped:
 
	






